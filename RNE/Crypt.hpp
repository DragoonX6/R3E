#ifndef CRYPT_HPP
#define CRYPT_HPP

#include <string.h>
#include <stdlib.h>

const unsigned char gCrcTable[256] = {
	0x00, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee, 
	0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16, 
	0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07, 
	0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff, 
	0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9, 
	0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b, 
	0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35, 
	0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62, 
	0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24, 
	0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50, 
	0xaf, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41, 
	0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a, 
	0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8, 
	0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73, 
	0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc, 
	0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd
	/*0x00, 0x5E,0xBC, 0xE2, 0x61, 0x3F, 0xDD, 0x83, 0xC2, 0x9C, 0x7E, 0x20, 0xA3, 0xFD, 0x1F, 0x41,
	0x9D, 0xC3, 0x21, 0x7F, 0xFC, 0xA2, 0x40, 0x1E, 0x5F, 0x01, 0xE3, 0xBD, 0x3E ,0x60 ,0x82, 0xDC,
	0x23, 0x7D, 0x9F, 0xC1, 0x42, 0x1C, 0xFE, 0xA0, 0xE1, 0xBF, 0x5D, 0x03, 0x80, 0xDE, 0x3C, 0x62,
	0xBE, 0xE0, 0x02, 0x5C, 0xDF, 0x81, 0x63, 0x3D, 0x7C, 0x22, 0xC0, 0x9E, 0x1D, 0x43, 0xA1, 0xFF,
	0x46, 0x18, 0xFA, 0xA4, 0x27, 0x79, 0x9B, 0xC5, 0x84, 0xDA, 0x38, 0x66, 0xE5, 0xBB, 0x59, 0x07,
	0xDB, 0x85, 0x67, 0x39, 0xBA, 0xE4, 0x06, 0x58, 0x19, 0x47, 0xA5, 0xFB, 0x78, 0x26, 0xC4, 0x9A,
	0x65, 0x3B, 0xD9, 0x87, 0x04, 0x5A, 0xB8, 0xE6, 0xA7, 0xF9, 0x1B, 0x45, 0xC6, 0x98, 0x7A, 0x24,
	0xF8, 0xA6, 0x44, 0x1A, 0x99, 0xC7, 0x25, 0x7B, 0x3A, 0x64, 0x86, 0xD8, 0x5B, 0x05, 0xE7, 0xB9,
	0x8C, 0xD2, 0x30, 0x6E, 0xED, 0xB3, 0x51, 0x0F, 0x4E, 0x10, 0xF2, 0xAC, 0x2F, 0x71, 0x93, 0xCD,
	0x11, 0x4F, 0xAD, 0xF3, 0x70, 0x2E, 0xCC, 0x92, 0xD3, 0x8D, 0x6F, 0x31, 0xB2, 0xEC, 0x0E, 0x50,
	0xAF, 0xF1, 0x13, 0x4D, 0xCE, 0x90, 0x72, 0x2C, 0x6D, 0x33, 0xD1, 0x8F, 0x0C, 0x52, 0xB0, 0xEE,
	0x32, 0x6C, 0x8E, 0xD0, 0x53, 0x0D, 0xEF, 0xB1, 0xF0, 0xAE, 0x4C, 0x12, 0x91, 0xCF, 0x2D, 0x73,
	0xCA, 0x94, 0x76, 0x28, 0xAB, 0xF5, 0x17, 0x49, 0x08, 0x56, 0xB4, 0xEA, 0x69, 0x37, 0xD5, 0x8B,
	0x57, 0x09, 0xEB, 0xB5, 0x36, 0x68, 0x8A, 0xD4, 0x95, 0xCB, 0x29, 0x77, 0xF4, 0xAA, 0x48 ,0x16,
	0xE9, 0xB7, 0x55, 0x0B, 0x88, 0xD6, 0x34, 0x6A, 0x2B, 0x75, 0x97, 0xC9, 0x4A, 0x14, 0xF6, 0xA8,
	0x74, 0x2A, 0xC8, 0x96, 0x15, 0x4B, 0xA9, 0xF7, 0xB6, 0xE8, 0x0A, 0x54, 0xD7, 0x89, 0x6B, 0x35*/
    };

struct CR001 {
	void Init(unsigned int seed){
		mVcSeed = seed;
		mBcSeed = seed;
		mAcSeed = seed;
		mMySeed = seed;
	}

	void SetType(unsigned char type){
		mType = type;
	}

	int R_BC(){
		mBcSeed = 0x8088405 * mBcSeed + 1;
		return mBcSeed / 0x10000;
	}

	int R_AC(){
		mAcSeed = (0x41C64E6D * mAcSeed + 12345) & 0x7FFFFFFF;
		return mAcSeed;
	}

	int R_MY(){
		mMySeed = 0x41C64E6D * mMySeed + 12345;
		return mMySeed / 0x10000;
	}

	int R_VC(){
		mVcSeed = (0x343FD * mVcSeed + 0x269EC3) & 0x7FFFFFFF;
		return mVcSeed / 0x10000;
	}

	int Get(){
		if(mType == 0)
			return R_BC();
		else if(mType == 1)
			return R_AC();
		else if(mType == 2)
			return R_MY();
		else
			return R_VC();
	}

	unsigned char mType;
	int mVcSeed;
	int mBcSeed;
	int mAcSeed;
	int mMySeed;
};

struct HeadCryptedServer {
	unsigned int AddBufferLen2 : 3;
	unsigned int AddTableValue1 : 3;
	unsigned int Command3 : 3;
	unsigned int EncryptValue1 : 3;
	unsigned int AddBufferLen3 : 3;
	unsigned int AddTableValue3 : 3;
	unsigned int Command2 : 3;
	unsigned int AddTableValue4 : 2;
	unsigned int Command1 : 3;
	unsigned int EncryptAddValue1 : 2;
	unsigned int AddBufferLen4 : 2;
	unsigned int EncryptAddValue2 : 2;
	unsigned char AddBufferLen1 : 3;
	unsigned char AddTableValue2 : 3;
	unsigned char Command4 : 2;
};

struct HeadCryptedClient {
	unsigned int Command2 : 3;
	unsigned int AddTableValue2 : 3;
	unsigned int AddBufferLen1 : 3;
	unsigned int AddTableValue3 : 3;
	unsigned int Command1 : 3;
	unsigned int EncryptValue1 : 3;
	unsigned int AddBufferLen2 : 3;
	unsigned int EncryptAddValue2 : 2;
	unsigned int AddBufferLen3 : 3;
	unsigned int AddTableValue4 : 2;
	unsigned int Command4 : 2;
	unsigned int EncryptAddValue1 : 2;
	unsigned char Command3 : 3;
	unsigned char AddTableValue1 : 3;
	unsigned char AddBufferLen4 : 2;
};

struct HeadDecrypted {
	unsigned __int64 AddBufferLen1 : 3;
	unsigned __int64 AddBufferLen2 : 3;
	unsigned __int64 AddBufferLen3 : 3;
	unsigned __int64 AddBufferLen4 : 2;
	unsigned __int64 Command1 : 3;
	unsigned __int64 Command2 : 3;
	unsigned __int64 Command3 : 3;
	unsigned __int64 Command4 : 2;
	unsigned __int64 AddTableValue1 : 3;
	unsigned __int64 AddTableValue2 : 3;
	unsigned __int64 AddTableValue3 : 3;
	unsigned __int64 AddTableValue4 : 2;
	unsigned __int64 EncryptAddValue1 : 2;
	unsigned __int64 EncryptAddValue2 : 2;
	unsigned __int64 EncryptValue1 : 3;
};

struct Head {
	unsigned __int64 AddBufferLen : 11;
	unsigned __int64 Command	: 11;
	unsigned __int64 AddTableValue : 11;
	unsigned __int64 EncryptAddValue : 4;
	unsigned __int64 EncryptValue : 3;
};

class Crypt {
public:
	Crypt();
	~Crypt();

	void Default();
	void Init(unsigned int key);

	bool Find_DupINDEX(unsigned int val, unsigned int range);
	bool Find_DupTABLE(unsigned int val, unsigned int table, unsigned int range);

	void ESSP(unsigned char* buffer);
	int ESCP(unsigned char* buffer, int& key);

	bool DRSB(unsigned char* buffer);
	unsigned short DRSH(unsigned char* buffer);

	bool DRCB(unsigned char* buffer);
	unsigned short DRCH(unsigned char* buffer);

private:
	unsigned int** mCryptTable;
	unsigned short* mCryptIndex;
};

#endif
